name: publish

on:
  release:
    types: [published]        # fires when a draft is published or a release is created as published
  push:
    tags:
      - 'v*'                  # fallback: publish on tag push (v1.2.3)
  workflow_dispatch:          # manual button: Actions → publish → Run workflow
    inputs:
      tag:
        description: 'Tag to publish (e.g., v1.2.3). Leave blank to use latest release/tag.'
        required: false
        type: string

permissions:
  contents: read
  id-token: write             # for npm provenance

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    concurrency:
      group: publish-${{ github.ref || inputs.tag || github.event.release.tag_name }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine tag
        id: tag
        run: |
          set -euo pipefail
          TAG_INPUT="${{ inputs.tag || '' }}"
          if [ -n "$TAG_INPUT" ]; then
            TAG="$TAG_INPUT"
          elif [ "${{ github.event_name }}" = "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            # refs/tags/v1.2.3
            TAG="${GITHUB_REF_NAME}"
          else
            echo "No tag found"; exit 1
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Using tag: $TAG"

      - name: Install OS deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 pkg-config libspandsp-dev

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Use tag's package.json (if tag exists)
        run: |
          # If the tag exists, check it out so package.json matches the code that was tagged.
          git checkout "refs/tags/${{ steps.tag.outputs.tag }}" || true

      - name: Verify tag matches package.json version
        run: |
          PKG_VERSION="v$(node -p "require('./package.json').version")"
          TAG="${{ steps.tag.outputs.tag }}"
          echo "package.json version: $PKG_VERSION"
          echo "tag: $TAG"
          if [ "$PKG_VERSION" != "$TAG" ]; then
            echo "::error::Tag $TAG does not match package.json version $PKG_VERSION"
            exit 1
          fi

      - name: Install (build from source)
        run: npm ci --build-from-source

      - name: Test
        run: npm test

      - name: Who am I (npm)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm whoami || true

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public --provenance